{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{PaymentElement,useStripe,useElements}from\"@stripe/react-stripe-js\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function CheckoutForm(){const stripe=useStripe();const elements=useElements();const[message,setMessage]=useState(null);const[isLoading,setIsLoading]=useState(false);useEffect(()=>{if(!stripe){return;}const clientSecret=new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");if(!clientSecret){return;}stripe.retrievePaymentIntent(clientSecret).then(_ref=>{let{paymentIntent}=_ref;switch(paymentIntent.status){case\"succeeded\":setMessage(\"Payment succeeded!\");break;case\"processing\":setMessage(\"Your payment is processing.\");break;case\"requires_payment_method\":setMessage(\"Your payment was not successful, please try again.\");break;default:setMessage(\"Something went wrong.\");break;}});},[stripe]);const handleSubmit=async e=>{e.preventDefault();if(!stripe||!elements){// Stripe.js hasn't yet loaded.\n// Make sure to disable form submission until Stripe.js has loaded.\nreturn;}setIsLoading(true);const{error}=await stripe.confirmPayment({elements,confirmParams:{// Make sure to change this to your payment completion page\nreturn_url:\"http://localhost:3000/products\"}});// This point will only be reached if there is an immediate error when\n// confirming the payment. Otherwise, your customer will be redirected to\n// your `return_url`. For some payment methods like iDEAL, your customer will\n// be redirected to an intermediate site first to authorize the payment, then\n// redirected to the `return_url`.\nif(error.type===\"card_error\"||error.type===\"validation_error\"){setMessage(error.message);}else{setMessage(\"An unexpected error occurred.\");}setIsLoading(false);};const paymentElementOptions={layout:\"tabs\"};return/*#__PURE__*/_jsxs(\"form\",{id:\"payment-form\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(PaymentElement,{id:\"payment-element\",options:paymentElementOptions}),/*#__PURE__*/_jsx(\"button\",{className:\"text-rose-taupe\",disabled:isLoading||!stripe||!elements,id:\"submit\",children:/*#__PURE__*/_jsx(\"span\",{id:\"button-text\",children:isLoading?/*#__PURE__*/_jsx(\"div\",{className:\"spinner\",id:\"spinner\"}):\"Pay now\"})}),message&&/*#__PURE__*/_jsx(\"div\",{id:\"payment-message\",children:message})]});}","map":{"version":3,"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","jsx","_jsx","jsxs","_jsxs","CheckoutForm","stripe","elements","message","setMessage","isLoading","setIsLoading","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","_ref","paymentIntent","status","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","type","paymentElementOptions","layout","id","onSubmit","children","options","className","disabled"],"sources":["/Users/kristinreddington/Github/S.Dali-Shop/src/containers/CheckoutForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  PaymentElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\n\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\n      \"payment_intent_client_secret\"\n    );\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000/products\",\n      },\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  const paymentElementOptions = {\n    layout: \"tabs\"\n  }\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n\n      <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n      <button className=\"text-rose-taupe\" disabled={isLoading || !stripe || !elements} id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n        </span>\n      </button>\n      {/* Show any error or success messages */}\n      {message && <div id=\"payment-message\">{message}</div>}\n    </form>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}